// Generated by Apple Swift version 4.0 (swiftlang-900.0.65.2 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#import <Attest/Attest.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("Attest")

/// Use Attest to start analysis for manual or automated testing.
SWIFT_CLASS("_TtC6Attest6Attest")
@interface Attest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A class containing all of the results from the analysis.
SWIFT_CLASS_NAMED("Result")
@interface Result : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Severity of an accessibility violation from a Rule.
typedef SWIFT_ENUM(NSInteger, Impact) {
/// The view is not in violation of a Rule.
  ImpactPass = 0,
/// The view did not fail a WCAG2.0 violation, but a best practice fix is recommended.
  ImpactBestPractice = 1,
/// The view has a minor WCAG2.0 violation.
  ImpactMinor = 2,
/// The view has a moderate WCAG2.0 violation.
  ImpactModerate = 3,
/// The view has a serious WCAG2.0 violation.
  ImpactSerious = 4,
/// The view has a critical WCAG2.0 violation.
  ImpactCritical = 5,
/// There was an error when the Rule attempted to run on the view.
  ImpactIncomplete = 6,
};




/// Each individual Rule contains an implementation to check for a certain accessibility violation. This class includes filtering out applicable vs inapplicable views, and storing the violations in a Rule.Result (or RuleResult in Obj-C). Each Rule requires a description, containing information about what the Rule does, and why it is important from an accessibility standpoint. You can inherit from the Rule class to create your own custom Rules.
SWIFT_CLASS_NAMED("Rule")
@interface Rule : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A class containing information about all accessibility violations found for all applicable views analyzed by one Rule.
SWIFT_CLASS_NAMED("Result")
@interface RuleResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// A unique identifier for each Rule.
typedef SWIFT_ENUM(NSInteger, RuleID) {
  RuleIDAccessibilityHint = 0,
  RuleIDColorContrast = 1,
  RuleIDConflictingTraits = 2,
  RuleIDDontIntersect = 3,
  RuleIDDynamicType = 4,
  RuleIDInHighlight = 5,
  RuleIDNestedA11yElements = 6,
  RuleIDSpeakableText = 7,
  RuleIDTouchTargetSize = 8,
  RuleIDCustomRule = 9,
};













@class PSWebSocketServer;
@class PSWebSocket;

/// This is the class that connects the device running the Attest framework to the Attest Mobile UI Client.
SWIFT_CLASS("_TtC6Attest15WebsocketServer")
@interface WebsocketServer : NSObject <PSWebSocketServerDelegate>
/// Will print “Server did stop” to NSLog for the server specified. Delegate Method.
/// \param server The server that stopped.
///
///
/// returns:
/// None.
- (void)serverDidStop:(PSWebSocketServer * _Null_unspecified)server;
/// Will print “Server did start” to NSLog for the server specified. Delegate Method.
/// \param server The server that started.
///
///
/// returns:
/// None.
- (void)serverDidStart:(PSWebSocketServer * _Null_unspecified)server;
/// Will print to NSLog that the server failed with the error specified. Delegate Method.
/// \param server the server that had an error.
///
/// \param error the error that occurred.
///
///
/// returns:
/// None.
- (void)server:(PSWebSocketServer * _Null_unspecified)server didFailWithError:(NSError * _Null_unspecified)error;
/// Will print to NSLog that the server’s webSocket opened. Delegate Method.
/// \param server The server whose webSocket opened.
///
/// \param webSocket the webSocket that opened.
///
///
/// returns:
/// None.
- (void)server:(PSWebSocketServer * _Null_unspecified)server webSocketDidOpen:(PSWebSocket * _Null_unspecified)webSocket;
/// Retrieves data and sends it through the webSocket to be used by the Attest UI Client. Delegate Method.
/// \param server the server with the webSocket that received the message.
///
/// \param webSocket the webSocket that received the message.
///
/// \param message the actual message. The message is one of the following:
/// <ul>
///   <li>
///     “DEVICE” - asking server to send information about the device.
///   </li>
///   <li>
///     “ANALYZE” - asking server to call Attest to run the accessibility analysis. Will print to NSLog with the results of the test.
///   </li>
///   <li>
///     “HIGHLIGHT” - asking server to highlight the view in violation.
///   </li>
/// </ul>
///
///
/// returns:
/// None.
- (void)server:(PSWebSocketServer * _Null_unspecified)server webSocket:(PSWebSocket * _Null_unspecified)webSocket didReceiveMessage:(id _Null_unspecified)message;
/// Will print to NSLog when the webSocket on a server closes. Delegate Method.
/// \param server The server with the webSocket that closed.
///
/// \param webSocket the webSocket that closed.
///
/// \param code Int representing the code that the server released when the webSocket closed.
///
/// \param reason String of the reason that the server’s webSocket closed.
///
/// \param wasClean Bool representing whether or not the webSocket was closed properly.
///
///
/// returns:
/// None.
- (void)server:(PSWebSocketServer * _Null_unspecified)server webSocket:(PSWebSocket * _Null_unspecified)webSocket didCloseWithCode:(NSInteger)code reason:(NSString * _Null_unspecified)reason wasClean:(BOOL)wasClean;
/// Will print to NSLog when the webSocket on a server fails. Delegate Method.
/// \param server the server with the webSocket that failed.
///
/// \param webSocket the webSocket that failed.
///
/// \param error Error, the reason for failing.
///
///
/// returns:
/// None.
- (void)server:(PSWebSocketServer * _Null_unspecified)server webSocket:(PSWebSocket * _Null_unspecified)webSocket didFailWithError:(NSError * _Null_unspecified)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
